var initVideo = function () {
  // Debounce helper for resize
  function debounce(func, wait = 300) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }
  function switchVideoSource(video) {
    const sources = video.querySelectorAll("source");
    if (!sources.length) return;
    const isMobile = window.innerWidth <= 768;
    // Check if current srcs already match what they should be, skip reload if so
    let needsReload = false;
    sources.forEach(source => {
      const media = source.getAttribute("media") || "";
      const shouldLoad =
        !media || // no media means desktop fallback
        (media.includes("max-width") && isMobile) ||
        (!media.includes("max-width") && !isMobile);
      const newSrc = shouldLoad ? source.dataset.src || "" : "";
      if (source.getAttribute('src') !== newSrc) {
        source.src = newSrc;
        needsReload = true;
      }
    });
    if (needsReload) {
      video.load();
      video.playbackRate = parseFloat(video.dataset.speed) || 1;
    }
    video.dataset.sourceSwitched = "true";
  }
  // Playback control button setup
  function setupControlButtons() {
    document.querySelectorAll(".video-bg-mp4 button.video-play-pause-btn:not(.init-video-fn)").forEach(btn => {
      btn.classList.add("init-video-fn");
      const parentDiv = btn.closest("div.animation-ctrl-btn-side")?.parentNode;
      const video = parentDiv?.querySelector("video.video-bg");
      if (!video) return;
      const isLoop = video.classList.contains("noloop");
      btn.addEventListener("click", e => {
        e.preventDefault();
        e.stopImmediatePropagation();
        if (video.paused) {
          video.play();
          btn.setAttribute("aria-label", "pause video animation");
          btn.querySelector("img.play-pause").src = "//assets2.razerzone.com/images/icon/pause.svg";
        } else {
          video.pause();
          btn.setAttribute("aria-label", "play video animation");
          btn.querySelector("img.play-pause").src = "//assets2.razerzone.com/images/icon/play.svg";
        }
      });
      if (isLoop) {
        video.addEventListener("ended", () => {
          video.pause();
          setTimeout(() => {
            if (btn.getAttribute("aria-label") === "pause video animation") {
              btn.setAttribute("aria-label", "play video animation");
              btn.querySelector("img.play-pause").src = "//assets2.razerzone.com/images/icon/play.svg";
            }
          }, 1);
        });
      }
    });
  }
  // Handle all videos
  function initAllVideos() {
    document.querySelectorAll(".video-bg").forEach(video => {
      video.playbackRate = parseFloat(video.dataset.speed) || 1;
      if (!video.classList.contains("lazyload")) {
        switchVideoSource(video);
      }
    });
  }
  // Lazyload setup
  function setupLazyLoad() {
    const lazyVideos = Array.from(document.querySelectorAll("video.lazyload"));
    if ("IntersectionObserver" in window) {
      lazyVideos.forEach(lazyVideo => {
        const observer = new IntersectionObserver((entries, obs) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.remove("lazyload");
              switchVideoSource(entry.target);
              obs.unobserve(entry.target);
            }
          });
        }, {
          threshold: lazyVideo.classList.contains("playdelay") ? 0.5 : 0
        });
        observer.observe(lazyVideo);
      });
    }
  }
  // Responsive switching
  function setupResponsiveSwitching() {
    window.addEventListener("resize", debounce(() => {
      document.querySelectorAll(".video-bg").forEach(video => {
        video.dataset.sourceSwitched = "false";
        switchVideoSource(video);
      });
    }, 300));
  }
  // Init everything
  setupControlButtons();
  initAllVideos();
  setupLazyLoad();
  setupResponsiveSwitching();
};
// Run after DOM is ready
if (document.readyState === "complete" || document.readyState === "interactive") {
  setTimeout(initVideo, 100);
} else {
  document.addEventListener("DOMContentLoaded", initVideo);
}
// Fire ready event for custom use
document.dispatchEvent(new CustomEvent("pnxCommonVideoFunctionReady", {
  detail: { success: true },
  bubbles: true,
  cancelable: true
}));