var balance_prevWidth = window.innerWidth;
var orphan_prevWidth = window.innerWidth;
var debounce = function (func, wait, immediate) {
    var timeout;
    return function () {
        var context = this,
        args = arguments;
        var later = function () {
            timeout = null;
            if (!immediate)
                func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow)
            func.apply(context, args);
    };
};
textBalancer = (function () {
    var once = false;
    var candidates = [];
    var initialize = function (selectors) {
        if (!selectors) {
            candidates = document.querySelectorAll('.balance-text');
        } else {
            createSelectors(selectors);
        }
		if(!document.querySelector('[pnx-balance-text-generated]')){
			const style = document.createElement("style");
			const style_content = document.createTextNode(".temporary-hide{display:initial!important;visibility:initial!important;width:0!important;;height:0!important;;overflow:hidden!important;}");
			style.appendChild(style_content);
			style.setAttribute("pnx-balance-text-generated","")
			document.body.appendChild(style);
		}
        balanceText();
        if(!once){
            var rebalanceText = debounce(function () {
                var width = window.innerWidth;
                if (width !== balance_prevWidth) {
                    balance_prevWidth = width;
                    balanceText();
                }
            }, 100);
            window.addEventListener('resize', rebalanceText);
        }
        once = true;
    }
    var balanceText = function () {
        var element;
        var i;
        var runBalanceRoutine = false;

        for (i = 0; i < candidates.length; i += 1) {
            element = candidates[i];
            if(element.dataset.balanceTextViewportWidth === undefined || element.dataset.balanceTextViewportWidth !== window.innerWidth.toString()){
                runBalanceRoutine = true;
                break;
            }           
        };

		if(runBalanceRoutine){
            document.querySelectorAll('[style*="display: none"]').forEach(function(el){
                el.classList.add("temporary-hide");
            });
            
            for (i = 0; i < candidates.length; i += 1) {
                element = candidates[i];
                
                if(element.dataset.balanceTextViewportWidth === undefined || element.dataset.balanceTextViewportWidth !== window.innerWidth.toString()){
                    if (textElementIsMultipleLines(element)) {
                        element.style.maxWidth = '';
                        squeezeContainer(element, element.clientHeight, 0, element.clientWidth);    
                    }
                    element.dataset.balanceTextViewportWidth = window.innerWidth;
                }
            }
            
            document.querySelectorAll('.temporary-hide').forEach(function(el){
                el.classList.remove("temporary-hide");
            });
        }
    }

    function squeezeContainer(headline, originalHeight, bottomRange, topRange) {
        var mid;
        if (bottomRange >= topRange) {
            if(headline.scrollWidth > topRange){
				headline.style.maxWidth = headline.scrollWidth + 'px';
			}else{
				headline.style.maxWidth = topRange + 'px';
			}
            return;
        }
        mid = (bottomRange + topRange) / 2;
        headline.style.maxWidth = mid + 'px';

        if (headline.clientHeight > originalHeight) {
            squeezeContainer(headline, originalHeight, mid + 1, topRange);
        } else {
            squeezeContainer(headline, originalHeight, bottomRange + 1, mid);
        }
    }
    var createSelectors = function (selectors) {
        selectorArray = selectors.split(',');
        for (var i = 0; i < selectorArray.length; i += 1) {
            var currentSelectorElements = document.querySelectorAll(selectorArray[i].trim());

            for (var j = 0; j < currentSelectorElements.length; j += 1) {
                var currentSelectorElement = currentSelectorElements[j];
                if (document.defaultView.getComputedStyle(currentSelectorElement).getPropertyValue("display").indexOf("block") == -1) {
                    currentSelectorElement.style.display = "inline-block";
                }
                currentSelectorElement.style.marginLeft = "auto";
                currentSelectorElement.style.marginRight = "auto";
                candidates.push(currentSelectorElement);
            }
        }
    }
    var textElementIsMultipleLines = function (element) {
        var firstWordHeight;
        var elementHeight;
        var HEIGHT_OFFSET;
        var elementWords;
        var firstWord;
        var ORIGINAL_ELEMENT_TEXT;

        ORIGINAL_ELEMENT_TEXT = element.innerHTML;
        HEIGHT_OFFSET = 8;

        let styleheight = null;
        if(element.style.height){
            styleheight = element.style.height;
        }
        element.style.height = "fit-content";
        elementWords = element.innerText.trim().split(' ');
        if (elementWords.length == 1) {
            elementWords = ["", elementWords[0]];
        }

        firstWord = document.createElement('span');
        firstWord.id = 'element-first-word';
        firstWord.innerHTML = elementWords[0];
        if (firstWord.innerHTML === "" && typeof elementWords[1] != 'undefined') {
            firstWord.innerHTML = elementWords[1];
        }
        elementWords = elementWords.slice(1);
        element.innerHTML = '';
        element.appendChild(firstWord);
        element.innerHTML += ' ' + elementWords.join(' ');
        firstWord = document.getElementById('element-first-word');
        
        firstWordHeight = firstWord?firstWord.offsetHeight:0;
        elementHeight = element.offsetHeight;
        element.innerHTML = ORIGINAL_ELEMENT_TEXT;
        if(styleheight){
            element.style.height = styleheight;
        }else{
            element.style.removeProperty('height');
        }
        return elementHeight - HEIGHT_OFFSET > firstWordHeight;
    }
    return {
        initialize: initialize,
    };
})();
var orphanWords = function () {
    let cjk_punctuation = new RegExp("[\u3000-\u303F]|[\uff0c-\uff1f]|[\uff00-\uffef]|[\u003f\u0021\u0026\u0025\u002a\u002f\u003a\u003b\u0040\u00b7]|[.,:><!?'\")(~`]", "gm");
    let latin = new RegExp("[\u0041-\u024f]", "gm");
    let numerals = new RegExp("[0-9]", "gm");
    let htmltag = new RegExp("<\/?[^>]+>", "gm");
    let is_rtl = false;
    let average_character_width = 0.62;
    if(document.querySelector(".razer-rtl")){ is_rtl = true; }

    document.querySelectorAll("orphan-text:not(.orphanfixed), o-t:not(.orphanfixed), .orphan-text:not(.orphanfixed)").forEach(function (elem) {
        var string = elem.innerHTML.trim();
        string = string.replace(/&nbsp;/gm, ' ');
        string = string.replace(/&gt;/gm, '>');
		string = string.replace(/&lt;/gm, '<');
		string = string.replace(/<orphan-span-text.*>(.*)<\/orphan-span-text>/gm,'$1');
        let font_size = parseInt(window.getComputedStyle(elem).getPropertyValue("font-size"));
        let line_width = elem.offsetWidth;

        let is_large_text = true;
        if(font_size < 20){
            is_large_text = false;
        }
           
        let string_arr = string.split("<br>");
        string_arr.forEach(function(string,i){
            string_arr[i] = string_arr[i].replace(/( *[^ ]{1,20}) ([^ ]{1,20})(\s*|\s*<\/\S+>\s*|\s*<\S+ *\S*>)$/gm, function(match,p1,p2,p3){
                if(p2.search(/[a-z0-9-_]+ *= *"[^"]*" *>?/)==0){
                    return match;
                }else{
                    if(is_large_text && (p1+p2+p3).length * font_size * average_character_width > line_width){
                        return match;
                    }else{
                        return p1+'&nbsp;'+p2+p3;
                    }
                }
            });

            string_arr[i] = string_arr[i].replace(/([^ ]{1,4})(\s*|\s*<\/\S+>\s*|\s*<\S+ *\S*>)$/gm, function(match,p1,p2){
                let a,b = null;
                for(let c=p1.length-1; c >= 0; c--){ 
                    if(!p1[c].match(latin) && !p1[c].match(cjk_punctuation) && !p1[c].match(numerals)){
                        if(b == null){
                            b = c;
                        }
                        else if(a == null){
                            a = c;
                            break;
                        }
                    }
                }
                
                if(a != null && b != null && !is_rtl){
                    let s = "";
                    for(let c=0; c < p1.length; c++){ 
                        if(c < a && c < b || c > a && c > b){
                            s += p1[c];
                        }
                        else if(c == a){
                            s += "<orphan-span-text style='white-space:nowrap;'>"+p1[c];
                        }
                        else if(c == b){
                            s += p1[c]+"</orphan-span-text>";
                        }
                    }
                    return s+p2;
                }
                else{
                    return match;
                }
            });
        });
        string = string_arr.join("<br>");

        
        string = string.replace(/RTX[™]? \S+|\d (mm|m|cm|nm|um|µm|g|kg|mg|GHz|MHz|kHz|Hz|in|W|mW|A|mA|V|mV|Ω|ohm|dB|dBA|dBSPL|KB|MB|GB|TB|PB|Mbps|s|ms|nits|bit)\b|(Windows|Bluetooth|USB|HDMI|DP|Playstation|Wi-fi|Wifi|Blade|iPhone|iOS|Android|DisplayPort|Thunderbolt)[™|®]? \d/gmi, function (match) {
            if(is_large_text && match.length * font_size * average_character_width > line_width){
                return match;
            }else{
                return match.replace(" ", '&nbsp;');
            }
        });

        string = string.replace(/Razer[™|®]? \S+|\S+ V\d\d?(?![a-z-])/gmi, function (match) {
            if(is_large_text && match.length * font_size * average_character_width > line_width){
                return match;
            }else{
                return match.replace(" ", '&nbsp;');
            }
        });

        //Chinese Razer Text
        if(!is_rtl){
            string = string.replace(/\u96F7\u86C7/gm, function (match) {
                return `<orphan-span-text style='white-space:nowrap;'>${match}</orphan-span-text>`;
            });
        }

        elem.innerHTML = string;

        elem.classList.add("orphanfixed");
    });
};
orphanWords();

var reOrphanText = debounce(function () {
    var width = window.innerWidth;
    if (width !== orphan_prevWidth) {
        orphan_prevWidth = width;
        document.querySelectorAll("orphan-text.orphanfixed, o-t.orphanfixed, .orphan-text.orphanfixed").forEach(function (elem) { 
            elem.classList.remove("orphanfixed"); 
            elem.innerHTML = elem.innerHTML.replace(/&nbsp;/gm, ' ').replace(/<orphan-span-text.*>(.*)<\/orphan-span-text>/gm,'$1');
        });
        orphanWords();
    }
}, 200);
window.addEventListener('resize', reOrphanText);

var balanceWords = function(){
textBalancer.initialize('.balance-text, balance-text, b-t');
};
document.fonts.ready.then(function(){
	balanceWords();
});
if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(balanceWords(), 100);
} else {
    document.addEventListener("DOMContentLoaded", balanceWords());
}

var balanceObserveDelay = null; 
var balanceObserve = function(){
    const callback = (mutationList, observer) => {
        observer.disconnect();
        clearTimeout(balanceObserveDelay);
        balanceWords();
        balanceObserveDelay = setTimeout(function(){
            balanceObserve();
        }, 170);
    };
    const observer = new MutationObserver(callback);
    observer.observe(document.querySelector("body"), { attributeFilter: ["class"], childList: true, subtree: true });
};
balanceObserve();
